//******************************************************************************
// 起動/終了トーク辞書
//******************************************************************************

// 自動でトーク中の改行にウェイトを追加
#define \n[half] %(NewLine(1))
#define \n %(NewLine(2))

// サーフェス短縮表記
#define [[ \s[
#define ]] ]

//******************************************************************************
//初回起動 OnFirstBoot
//******************************************************************************

OnFirstBoot
{
	// ---- 変数の初期化 ----
	lastIntroductionYuri = -1
	lastIntroductionSuzu = -1
	bootCount = 1
	talkAutoWait = 4
	aitalkinterval = 180
	nadeSensitivity = 1
	fav_Suzu = 0
	fav_Yuri = 0
	username = 'お客様'

	// ---- 初回起動トーク ----
	FirstBootTalk
}

FirstBootTalk{
	Init
	--
	"\t\1[[1999]]\0[[0]]いらっしゃい。\n[[11]]あら、初めてのお客さんかな。\n[[50]]鈴ー！　お客さんの応対お願いー！！\n[half]\n/
	\1[[1005]]お帰りなさいませ、ご主人様？\n[[1000]]さあ、お荷物をお預かりいたしますわ。\n[half]\n/
	\0[[66]]鈴、誤解されることを言うのはやめなさい。\n[[0]]……ここは保護猫カフェ「アダプト」。\n[[16]]猫たちが自分の場所を見つけるための手助けをする場所。\n[half]\n/
	\1[[1020]]わたしたちはここのウェイターだよ。\nわたしが鈴、[[1050]]こっちの真面目なのが悠梨っていうの。\n\n[[1055]]あなたの名前も聞いていい？\n\n/
	\*\q[名前を教える,InputUsernameFirst]%(NewLine(2,0))/
	\q[あとで教える,InputLater]"
}

InputUsernameFirst
{
	Init
	--
	"\c\1[[1055]]なんて呼べばいいかな？/
	\t\*\![open,inputbox,SetUsernameFirst,-1,""%(tempUsername)""]/
	\q[,InputLater]" // 文章無しの選択肢を\*付きで置くことで自動で消えなくする
}

SetUsernameFirst
{
	Init
	--
	if (_argv[0] == INPUT_CLOSE) || (_argv[0] == INPUT_TIMEOUT) || (_argv[0] == "")
	{
		InputLater
		return
	}

	username = _argv[0]

	case username
	{
		when '悠梨'{
			'\0[[31]]え、それ私の名前……\n[half]\n/
			\1[[1055]]珍しいこともあるものだね？\n[half]\n/
			\0[[6]]……まあいいか。\nよろしくね。[[19]]ゆ、悠梨。\x\e'
		}
		when '鈴'{
			'\1[[1011]]わたしと同じ名前だ、[[1065]]うれしいな。\n[half]\n/
			\0[[64]]……すんなり受け入れてるけど、いいの？\n[half]\n/
			\1[[1050]]なにが？\n[half]\n/
			\0[[6]]あなたが良いならいいけれど。\n[[0]]……よろしくお願いしますね、鈴。\x\e'
		}
		others{
			"\1[[1005]]%(username)ですね、覚えました！\n[half]\n/
			\0[[20]]よろしくね、%(username)。\n[[16]]このお店があなたのためになれるとうれしいな。\x\e"
		}
	}
}

InputLater
{
	"\1[[1055]]じゃあ、ひとまず%(username)で。/
	\0[[16]]ゆっくりしていってくださいね、%(username)。\x\e"
}

//******************************************************************************
//通常の起動 OnBoot
//******************************************************************************

OnBoot
{
	// ToDo: 起動時の処理を行う
	InitializeVariableOnBoot
	
	// ToDo: イベントなどの特別な起動があるとき
	if month == userBirthMonth && day == userBirthDay{
		BootOnUserBirthDay
		return
	}

	_day = month * 100 + day

	case _day{
		when 101 {
			// 正月イベント
			BootOnNewYearsDay
			return
		}
		when 1224 {
			// クリスマスイブイベント
			BootOnChristmasEve
			return
		}
		when 1225 {
			// クリスマスイベント
			BootOnChristmas
			return
		}
		when 1231 {
			// 大晦日イベント
			BootOnNewYearsDayEve
			return
		}
	}

	// 通常の起動
	NormalBootTalk
}

// 起動時の諸変数設定
InitializeVariableOnBoot : void
{
	// その日最初の起動の場合
	if lastBootDate != year * 10000 + month * 100 + day{
		lastBootDate = year * 10000 + month * 100 + day

		isGivenFoodToYuri = 0
		isGivenFoodToSuzu = 0

		isFirstBootOnTheDay = 1
	}
	else{
		isFirstBootOnTheDay = 0
	}

	dicMode = MODE_NORMAL

	currentOperationSecond = 0
	bootCount++
}

NormalBootTalk
{
	//---- まず双方のサーフィスを表示
	Init
	--
	case dicMode
	{
		when MODE_NORMAL
			TOSTR(EVAL(CHR(0x22)+BootTalkBasic()+CHR(0x22)))
		when MODE_YURI
			TOSTR(EVAL(CHR(0x22)+BootTalkYuri()+CHR(0x22)))
		when MODE_SUZU
			TOSTR(EVAL(CHR(0x22)+BootTalkSuzu()+CHR(0x22)))
	}
}

// その日2回目の起動
BootAgain
{
	Init
	--
	case dicMode
	{
		when MODE_NORMAL
			TOSTR(EVAL(CHR(0x22)+BootTalkBasicAgain()+CHR(0x22)))
		when MODE_YURI
			TOSTR(EVAL(CHR(0x22)+BootTalkYuri()+CHR(0x22)))
		when MODE_SUZU
			TOSTR(EVAL(CHR(0x22)+BootTalkSuzu()+CHR(0x22)))
	}
}

//------------------------------------------------------------------------------
//朝/昼/夜などをおおざっぱに調べる関数
//------------------------------------------------------------------------------
GetTimeSlot
{
	case hour{
		when 22,23,0,1,2,3 {'深夜'}
		when 4,5,6,7,8,9,10,11 {'朝'}
		when 12,13,14,15,16,17 {'昼'}
		when 18,19,20,21 {'夜'}
	}//caseの終わり
}


//******************************************************************************
//終了 OnClose
//******************************************************************************

OnClose
{
	// 終了時の処理（Unload関数でいいかも）
	dicMode = MODE_NORMAL

	// イベント終了トークなど
	_day = month * 100 + day
	case _day {
		when 101 {
			dicMode = MODE_YURI
			NewYearClose
			return
		}
		when 1231 {
			dicMode = MODE_YURI
			NewYearEveClose
			return
		}
	}
	if currentOperationSecond < 600
	{
		EarlyCloseTalk
		return
	}

	// 通常の終了トーク
	NormalCloseTalk
}

NormalCloseTalk
{
	Init
	--
	case dicMode
	{
		when MODE_NORMAL
			TOSTR(EVAL(CHR(0x22)+CloseTalkBasic()+CHR(0x22)))
		when MODE_YURI
			TOSTR(EVAL(CHR(0x22)+CloseTalkYuri()+CHR(0x22)))
		when MODE_SUZU
			TOSTR(EVAL(CHR(0x22)+CloseTalkSuzu()+CHR(0x22)))
	}
	--
	'\w9\w9\-\e'
}

// 起動から10分以内に終了したとき
EarlyCloseTalk
{
	Init
	--
	case dicMode
	{
		when MODE_NORMAL
			TOSTR(EVAL(CHR(0x22)+EarlyCloseTalkBasic()+CHR(0x22)))
		when MODE_YURI
			TOSTR(EVAL(CHR(0x22)+CloseTalkYuri()+CHR(0x22)))
		when MODE_SUZU
			TOSTR(EVAL(CHR(0x22)+CloseTalkSuzu()+CHR(0x22)))
	}
	--
	'\w9\w9\-\e'
}
